Which of the following programs translates source files written in a high-level programming language to assembly language or machine language?	
An interpreter.
false
An assembler.
false
A compiler.
true
A linker.
false
####
The C++ programming language is best described as which of the following?
A functional language with object-oriented features.
false
A logic language with object-oriented features.
false
A scripting language with object-oriented features.
false
A von Neumann language with object-oriented features.
true
####
What is the difference between declarative languages and imperative languages?
Declarative languages focus on what the computer should do, while imperative languages focus on how the computer should do it.
true
Imperative languages focus on what the computer should do, while declarative languages focus on how the computer should do it.
false
Declarative languages use recursive functions, while imperative languages do not allow recursion.
false
Imperative languages use recursive functions, while declarative languages do not allow recursion.
false
####
Which of the following programs converts assembly language instructions into machine language? 	
A compiler.
false
An assembler. 	
true
A linker. 	
false
A loader.
false
####
Which of the following programs combines object files to create an executable file?
A compiler.
false
An assembler.
false
A linker.
true
A loader.
false
####
What is the difference between a compiler and an interpreter?
A compiler does not translate programs into another language.
false
An interpreter does not translate programs into another language.
true
A compiler can only be used with imperative languages.
false
An interpreter can only be used with declarative languages.
false
####
Which of the following was not part of the original set of Pascal installation tools?
A Pascal compiler, written in Pascal, that generated P-code.
false
A Pascal compiler, written in P-code, that generated P-code.
false
A P-code interpreter, written in Pascal.
false
A P-code interpreter, written in P-code.
true
####
Lisp, Scheme, and Haskell are examples of which of the following types of languages?
Functional languages.
true
Dataflow languages.
false
Logic languages.
false
Scripting languages.
false
####
Python, Perl, and Ruby are examples of which of the following types of languages?
Functional languages.
false
Dataflow languages.
false
Logic languages.
false
Scripting languages.
true
####
Prolog and Datalog are examples of which of the following types of languages?
Functional languages.
false
Dataflow languages.
false
Logic languages.
true
Scripting languages.
false
####
What is the difference between syntax and semantics?
Syntax refers to the identification of tokens, wile semantics refers to the rules for how tokens can be combined.
false
Semantics refers to the identification of tokens, wile syntax refers to the rules for how tokens can be combined.
false
Syntax refers to the meaning and interpretation of programs, while semantics refers to the form and structure of programs.
false
Semantics refers to the meaning and interpretation of programs, while syntax refers to the form and structure of programs.
true
####
Which of the following kinds of rules are not allowed in a regular expression?
Concatenation.
false
Alternation.
false
Repetition.
false
Recursive rules.
true
####
What are regular expressions used for?
Specifying the rules for how tokens are formed in a programming language.
true
Specifying the rules for arbitrarily nested constructs in a programming language.
false
Specifying rules for making sure the type of a variable declaration matches the context in which the variable is used.
false
Translating a program from a high-level language into an intermediate language.
false
####
Variables names and function names are examples of which of the following types of tokens?
Keywords.
false
Identifiers.
true
Constants
false
Operators.
false
####
Which of the following strings is not generated by the regular expression a (a | b)*?
a
false
aa
false
ba
true
ab
false
####
In a context-free grammar, what are the symbols on the LHS of each production called?
Terminals.
false
Nonterminals.
true
Tokens.
false
Regular expressions.
false
####
Which of the following was not part of the original Backus-Naur Form (BNF)?
Concatenation.
false
Alternation.
false
The Kleene star.
true
Recursive productions.
false
####
What is the difference between a derivation and a parse tree?
A derivation shows an ordered sequence of applications of productions, while a parse tree represents the application of productions graphically.
true
A parse tree shows an ordered sequence of applications of productions, while a derivation represents the application of productions graphically.
false
A derivation is used for regular expressions, while a parse tree is used for context-free grammars.
false
A parse tree is used for regular expressions, while a derivation is used for context-free grammars.
false
####
Which of the following is not true about parse trees?
The root of the parse tree is the start symbol for the grammar.
false
The leaves of the parse tree are terminal symbols.
false
There can only be one parse tree for any given grammar and string of terminal symbols.
true
The children of a node are the symbols on the RHS of a production who's LHS is the symbol corresponding to the node itself.
false
####
What makes a grammar ambiguous?
The use of recursive productions.
false
The existence of more than one derivation for a given string of terminal symbols.
false
The existence of more than one parse tree for a given string of terminal symbols.
true
The combination of alternation and concatenation in productions.
false
####
At which of the following times is the size and precision of a numerical value determined?
Language design time.
false
Language implementation time.
true
Program writing time.
false
Compile time.
false
####
At what time are physical addresses assigned to virtual addresses?
Compile time.
false
Link time.
false
Load time.
true
Run time.
false
####
Which of the following storage allocation mechanisms assigns a memory address that persists throughout the running of a program?
Static allocation.
true
Stack allocation.
false
Heap allocation.
false
None of the above.
false
####
Which of the following is not stored in an activation record on a call stack?
A return address.
false
Local variables.
false
Subroutine arguments.
false
Global variables.
true
####
What is the difference between internal fragmentation and external fragmentation?
Internal fragmentation occurs when more space is allocated than requested. External fragmentation can occur when the exact amount is allocated.
true
Internal fragmentation occurs when less space is allocated than requested. External fragmentation can occur when the exact amount is allocated.
false
External fragmentation occurs when more space is allocated than requested. Internal fragmentation can occur when the exact amount is allocated.
false
External fragmentation occurs when less space is allocated than requested. Internal fragmentation can occur when the exact amount is allocated.
false
####
An object is dynamically allocated, assigned to a variable, and the object is not deallocated before the variable becomes inactive. This is an example of which of the following?
A dangling reference.
false
A memory leak.
true
Garbage collection.
false
None of the above.
false
####
What is the difference between static scoping and dynamic scoping?
Statically scoped bindings can be determined at run time. Dynamically scoped bindings must be determined at compile time.
false
Statically scoped bindings can be determined at compile time. Dynamically scoped bindings must be determined at run time.
true
Statically scoped bindings must be determined at run time. Dynamically scoped bindings can be determined at compile time.
false
Statically scoped bindings must be determined at compile time. Dynamically scoped bindings can be determined at run time.
false
####
What is the closest nested scope rule?
A binding is active in the subroutine in which it is declared and any subroutines that it calls unless a new binding with the same name is introduced.
false
A binding is active everywhere.
false
A binding is active in the scope in which it is declared and any internally nested scope unless a new binding is introduced in that scope.
true
A binding is active in the scope in which it is declared, but not in any nested scope.
false
####
How are declarations and definitions used differently in C?
A declaration binds a value to a name. A definition binds a type to a name.
false
A declaration must appear after a definition, otherwise the program will not compile.
false
A declaration is used for statically allocated objects. A definition is used for stack allocated objects.
false
A declaration introduces a name so it can be used before a definition for that name appears.
true
####
Which of the following is not true about modules?
Modules may contain variables and subroutines.
false
Objects in the module are not visible to each other.
true
Objects on the inside of the module may need to be exported to be visible on the outside.
false
Objects on the outside of the module may need to be imported to be visible on the inside.
false
####
Which of the following is true about dynamically scoping?
The current binding is the one most recently encountered during execution.
true
The current binding is the one least recently encountered during execution.
false
The current binding is determined using the closest nested scope rule.
false
The current binding is determined at compile time.
false
####
In Perl, the my keyword used in a variable declaration indicates which of the following?
The variable is statically allocated.
false
The variable is local and dynamically scoped.
false
The variable is local and statically scoped.
true
The variable is global.
false
####
What is the difference between aliases and overloaded names?
An alias is a name that refers to multiple objects. Overloaded names are different names that refer to the same object.
false
Aliases are different names that refer to the same object. An overloaded name refers to multiple objects.
true
An alias is a name that can be resolved at compile time. An overloaded name must be resolved at run time.
false
An alias must be resolved at run time. An overloaded name can be resolved at compile time.
false
####
Which of the following techniques involves implementing multiple functions with the same name, but arguments of different types?
Overloading.
true
Coercion.
false
Parametric polymorphism.
false
Subtype polymorphism.
false
####
Which of the following techniques is used when the compiler automatically converts an argument to the type of the corresponding parameter?
Overloading.
false
Coercion.
true
Parametric polymorphism.
false
Subtype polymorphism.
false
####
What is the difference between a shallow binding and a deep binding?
A shallow binding is used with static allocation. A deep binding is used with dynamic allocation.
false
A shallow binding is used with dynamic allocation. A deep binding is used with static allocation.
false
A shallow binding is used with static scoping. A deep binding is used with dynamic scoping.
false
A shallow binding is used with dynamic scoping. A deep binding is used with static scoping.
true
####
What is a closure?
A reference to a subroutine.
false
A reference to a subroutine bundled with a referencing environment.
true
A referencing environment passed as an argument to a subroutine.
false
A subroutine passed as an argument to a subroutine.
false
####
If an object is first-class, which of the following are possible?
It may be passed as a parameter.
false
It may be returned from a subroutine.
false
It may be assigned to a variable.
false
All of the above.
true
####
What does unlimited extent mean?
A variable with unlimited extent can take up any amount of space.
false
A variable with unlimited extent can be accessed anywhere in a program.
false
A variable with unlimited extent exists beyond the function in which it is defined.
true
A variable with unlimited extent can do anything that it sets its mind to do.
false
####
Which of the following is not a feature available in C++?
Static scoping.
false
Dynamic scoping.
true
Static allocation.
false
Dynamic allocation.
false
####
Which of the following is not traditionally a feature of functional programming?
Functions as first class objects.
false
Anonymous functions.
false
Polymorphism.
false
Assignment statements.
true
####
Which of the following is an example of an expression written in Cambridge Polish Notation?
(2 + 3)
false
(+ 2 3)
true
+(2, 3)
false
(2 3 +)
false
####
Which of the following represents a Boolean value in Scheme?
#t
true
#true
false
'true
false
####
Why does the expression ((* 7 8)) produce an error in Scheme?
There are not enough parentheses.
false
The * symbol does not represent a valid operation.
false
The types of the operands are incorrect.
false
There are too many parentheses.
true
####
####
symbol
true
list
false
list
false
symbol
false
symbol
false
symbol
false
list
false
list
false
####
According to convention, what form does the name of a predicate in Scheme usually have?
An identifier ending with a !
false
An identifier ending with a ?.
true
An identifier ending with a .
false
None of the above.
false
####
Which of the following best describes how Scheme evaluates the following expression?
(if a b c)
false
All three expressions a, b, and c are evaluated. If a evaluates to true, the value of b is returned. Otherwise the value of c is returned.
false
All three expressions a, b, and c are evaluated. If a evaluates to true, the value of c is returned. Otherwise the value of b is returned.
false
The expression a is evaluated. If a evaluates to true, b is evaluated and returned. Otherwise c is evaluated and returned.
true
The expression a is evaluated. If a evaluates to true, c is evaluated and returned. Otherwise b is evaluated and returned.
false
####
What is the lambda special form used for in Scheme?
Defining global variables.
false
Defining local variables.
false
Creating anonymous functions.
true
Creating lists.
false
####
What is the define special form used for in Scheme?
Defining global variables.
true
Defining local variables.
false
Creating anonymous functions.
false
Creating lists.
false
####
What is the let special form used for in Scheme?
Defining global variables.
false
Defining local variables.
true
Creating anonymous functions.
false
Creating lists.
false
####
What is the difference between let and letrec in Scheme?
letrec allows recursive definitions, let does not.
true
let allows recursive definitions, letrec does not.
false
letrec allows references to earlier bindings, let does not.
false
let allows references to earlier bindings, letrec does not.
false
####
What is the result of evaluating the following Scheme expression?
(cons 3 4)
false
7
false
34
false
'(3 4)
false
'(3 . 4)
true
####
What do the car and cdr functions do?
The car function constructs a pair and the cdr function deconstructs it.
false
The car function deconstructs a pair and the cdr function constructs it.
false
The car function gets the first element of a pair and the cdr function gets the second element.
true
The car function gets the second element of a pair and the cdr function gets the first element.
false
####
Which of the following expressions does not generate the list '(a b c)?
(cons 'a '(b c))
false
(cons 'a (cons 'b (cons 'c '())))
false
'(a b c)
false
(cons 'a (cons 'b 'c))
true
####
What does the following expression evaluate to?
(car (cdr (cdr '(1 2 3))))
false
1
false
2
false
3
true
None of the above.
false
####
Which of the following should only be used to compare numerical values?
=
true
eq?.
false
eqv?.
false
equal?.
false
####
Which of the following special forms produces a side-effect?
lambda
false
set!
true
let
false
cond
false
####
Which of the following special forms is used to execute one or more statements in sequence?
begin
true
do
false
for-each
false
display
false
####
Which of the following special forms is used for console output?
begin
false
do
false
for-each
false
display
true
####
Which of the following refers to an operator that appears after its operands?
A prefix operator.
false
An infix operator.
false
A postfix operator.
true
A suffix operator.
false
####
Which of the following refers to an operator that has exactly two operands?
A unary operator.
false
A binary operator.
true
A ternary operator.
false
A quaternary operator.
false
####
What is the difference between precedence rules and associativity rules?
Precedence rules apply to all operators while associativity rules only apply to binary operators.
false
Associativity rules apply to all operators while precedence rules only apply to binary operators.
false
Precedence rules apply to different operators while associativity rules apply to operators at the same precedence level.
true
Associativity rules apply to different operators while precedence rules apply to operators at the same associativity level.
false
####
Which of the following best describes the value model of assignment as applied to the following statement: a = b; ?
a is treated as an l-value while b is treated as an r-value.
true
a is treated as an r-value while b is treated as an l-value.
false
Both a and b are treated as l-values.
false
Both a and b are treated as r-values.
false
####
Which of the following performs an operation like subtraction along with assigning a value?
Boxing.
false
Unboxing.
false
Combined assignment.
true
Multiway assignment.
false
####
What is the difference between eager and lazy evaluation?
Lazy evaluation produces side-effects.
false
Eager evaluation produces side-effects.
false
Lazy evaluation evaluates all operands before performing an operation.
false
Eager evaluation evaluates all operands before performing an operation.
true
####
Which of the following is not an example of structured programming?
An if statement.
false
A goto statement.
true
A while loop.
false
A sequence of statements enclosed in a block.
false
####
Which of the following will not result in exiting out of the current subroutine?
A break statement.
true
Throwing an exception.
false
An early return statement.
false
A multi-level return statement.
false
####
Which of the following is not an example of a compound statement?
A sequence of statements indented at the same level in Python.
false
A sequence of method declarations in a class in Java.
true
A sequence of statements contained in curly braces in C.
false
A sequence of statements between begin and end keywords in Pascal.
false
####
An if...elsif...else statement in Ruby is an example of which of the following kinds of control flow?
Sequencing.
false
Selection.
true
Iteration.
false
Recursion.
false
####
What is the difference between the Algol W case statement and the C switch statement?
The C switch statement does can not use an integer as a test value.
false
The C switch statement requires a break statement in order to avoid executing additional cases.
true
The C switch statement allows individual cases to cover a range of values.
false
The C switch statement does not provide a default case.
false
####
What is an enumeration controlled loop?
A loop that checks a condition before executing the statements in the body.
false
A loop that checks a condition after executing the body.
false
A loop that is executed until some Boolean condition changes.
false
A loop that is executed once for each value in a finite set of values.
true
####
Which of the following is not true about a for loop in C?
The initialization statement is executed exactly once.
false
The increment statement is executed after each iteration.
false
The condition is tested before each iteration.
false
There must be an initialization statement, condition, and increment statement in the loop header.
true
####
How are iterators implemented in functional languages?
Using a separate thread of control.
false
Using an object containing the state of the iteration.
false
Using recursion and a function passed as a parameter.
true
Using a record structure that keeps track of state.
false
####
How are iterators implemented in object-oriented languages?
Using a separate thread of control.
false
Using an object containing the state of the iteration.
true
Using recursion and a function passed as a parameter.
false
Using a record structure that keeps track of state.
false
####
The do...while loop in C is an example of which of the following?
A pre-test loop.
false
A post-test loop.
true
A mid-test loop.
false
A no-test loop.
false
####
When is recursion preferable to iteration?
When performance is a high priority.
false
When there is a need to conserve space used by the call stack.
false
When it is more natural to express a computation recursively.
true
When processing an array-like structure in sequential order.
false
####
Which of the following is not a descendent of the ML programming language?
SML
false
OCaml
false
Scheme
true
Haskell
false
####
How are OCaml and Scheme different?
Scheme is a functional programming language while OCaml is an imperative programming language.
false
Scheme is an interpreted language while OCaml is a compiled language.
false
Scheme supports anonymous functions while OCaml does not.
false
Scheme determines types dynamically, while OCaml determines types statically using type inference.
true
####
Which of the following directives is use to load an OCaml program in the interpreter?
#use
true
#load
false
#run
false
#define
false
####
Which of the following is not one of the supported basic data types in OCaml?
int
false
float
false
double
true
char
false
####
Which of the following expressions will generate an error in OCaml?
54 + 72
false
5.4 + 7.2
true
5.4 +. 7.2
false
54. +. 72.
false
####
In OCaml, what is the difference between the == operator and the = operator?
The == operator is used for comparison while = is used for assignment.
false
The == operator is left-associative while the = operator is right-associative.
false
The == operator tests if two names refer to the same object, the = operator tests if two objects have the same internal structure.
true
There is no difference.
false
####
Which of the following is not a correct way to write a function that squares an integer?
let square = fun x -> x * x;;
false
let square x = x * x;;
false
let square (x: int) = x * x;;
false
let square (int: x) = x * x;; 
true
####
What is the difference between the let expression and the let rec expression in OCaml?
The let rec expression allows the name being defined to be used in its own definition. 
true
The let rec expression allows the name being defined to be used in the expression being evaluated.
false
The let rec expression allows multiple names to be defined.
false
The let rec expression defines a global name.
false
####
Which of the following is the correct syntax for a list in OCaml?
[1, 2, 3]
false
[1; 2; 3]
true
(1 2 3)
false
(1, 2, 3)
false
####
What is the difference between a list and an array in OCaml?
The elements of a list must all be of the same type.
false
A list can not be empty.
false
A list can not be modified.
true
The items of a list can be accessed directly using an index.
false
####
What is the difference between tuples and lists in OCaml?
A tuple is mutable.
false
The elements of a tuple can have different types.
true
A tuple can be empty.
false
Pattern matching can not be used with a tuple.
false
####
Given the following type definition: type person = {name: string; age: int};; Which of the following is the correct syntax for creating a new record of this type?
("Xavier Leroy", 49)
false
["Xavier Leroy"; 49]
false
{"Xavier Leroy"; 49}
false
{name = "Xavier Leroy", age = 49} 
true
####
Given the following definition: let numRef = ref 41;; Which of the following increments the stored value?
numRef = numRef + 1
false
numRef <- numRef + 1
false
!numRef = !numRef + 1
false
numRef := !numRef + 1
true
####
In OCaml what is the difference between a record type and a variant type?
A record type can contain several values of possibly different types. A variant type can be constructed from one of several different types.
true
A record is mutable, while a variant is immutable.
false
To construct a record the elements must be in a specified order. Elements of a variant can be in any order.
false
All of the elements of a record must be of the same type. A variant can contain elements of different types.
false
####
Which of the following is not a correct use of pattern matching?
let third (x, y, z) = z;;
false
let third (_, _, z) = z;;
false
let third (x, y, _) = _;;
true
let third triple = let (x, y, z) = triple in z;;
false
####
Which of the following expressions does not generate a side effect?
print_string "OCaml makes my head hurt."
false
x := !x = 1
false
a.(4) <- 2;;
false
z = 12;;
true
####
Which of the following best describes logic programming?
The programmer writes functions that perform computations without maintaining any state.
false
The programmer writes axioms that can be used to prove theorems.
true
The programmer writes procedures that execute a sequence of statements that change the state of the program.
false
The programmer writes classes that can be used to create objects that communicate using messages.
false
####
What is a Horn clause?
A sequence of clauses, each of which is either a fact or a rule.
false
A sequence of clauses, each of which is either a head or a body.
false
A sequence of terms that express that if every term in the head is true, then the term in the body is also true.
false
A sequence of terms that express that if every term in the body is true, then the term in the head is also true.
true
####
Which of the following best describes the process of resolution?
Given X <- Y, Z and W <- X, we can deduce that W <- Y, Z.
true
Given X <- Y, Z and W <- X, we can deduce that X <- W, Z.
false
Given X <- Y, Z and X <- W we can deduce that W <- Y, Z.
false
Given X <- Y, Z and X <- W we can deduce that X <- W, Z.
false
####
Which of the following best describes the process of unification?
If p(V) matches with p(c), then the variable V is bound to the value c.
true
If p(c) matches with q(c), then the predicate p is bound to the predicate q.
false
If p(c) matches with p(d), then the value c is bound to the value d.
false
If p(c) matches with q(V), then the variable V is bound to the value c, and the predicate p is bound to the predicate q.
false
####
Which of the following is not a type of Prolog term?
A constant.
false
A variable.
false
A clause.
true
A structure.
false
####
Which of the following is not an atom in Prolog?
atom
false
Atom
true
'atom'
false
!
false
####
Which of the following best describes a structure in Prolog?
An identifier starting with an upper-case letter.
false
An atom or a number.
false
An atom followed by a list of terms in parentheses separated by commas.
true
A functor and the number of arguments it takes.
false
####
In Prolog, a clause without a body is called a __________?
fact
true
rule
false
query
false
term
false
####
In Prolog, a clause without a head is called a __________?
fact
false
rule
false
query
true
term
false
####
Which of the following is not a possible response to a query from the Prolog interpreter?
The query succeeds.
false
The query succeeds conditionally.
false
The query fails.
false
The query fails conditionally.
true
####
Which of the following is not correct under the rules of unification in Prolog?
x unifies with x.
false
V unifies with x. 
false
y unifies with V.
false
x unifies with y.
true
####
What will be the response from the Prolog interpreter to the following query?
?- p(X, a) = p(b, Y).
false
true.
false
false.
false
X = b,
true
Y = a.
false
X = a,
false
Y = b.
false
####
Which of the following is not equivalent to the Prolog list [1, 2, 3, 4]?
[1 | 2, 3, 4]
false
[1, 2 | 3, 4]
true
[1, 2, 3 | [4]]
false
[1, 2, 3, 4 | []]
false
####
Given a predicate called reverse with an arity of 2 that succeeds if the second argument is the reverse of the second, which of the following queries will not succeed?
reverse([1, 2, 3], [3, 2, 1])
false
reverse(X, [3, 2, 1]).
false
reverse([1, 2, 3], [X | [2, 1]]).
false
reverse([1, 2, 3], [X | [1]]).
true
####
Which of the following Prolog queries will result in the following response?
X = 9.
false
?- X = 4 + 5.
false
?- X is 4 + 5.
true
?- 4 + 5 = X.
false
?- 4 + 5 is X.
false
####
At what point in the process of proving a goal does Prolog report failure?
When it is unable to find a match for a goal.
false
When it is only able to find a conditional match for a goal.
false
When it is only able to find an unconditional match for a goal.
false
When all choices have been exhausted.
true
####
At what point in the process of proving a goal does Prolog use backtracking?
When it is unable to find a match for a goal.
true
When it is only able to find a conditional match for a goal.
false
When it is only able to find an unconditional match for a goal.
false
When all choices have been exhausted.
false
####
Which of the following predicates is useful for simulating loops and selection statements?
The "cut" predicate !. 
true
The call predicate.
false
The fail predicate.
false
The not predicate.
false
####
Which of the following Prolog queries does not generate a side-effect?
?- read(Input).
false
?- write(Output).
false
?- X = 3.
true
?- nl.
false
####
Which of the following predicates does not modify a Prolog database?
assert(X)
false
not(X)
true
retract(X)
false
retractall(X).
false
####
